//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay_PC"",
            ""id"": ""cffda71a-bc12-44ee-af0e-5f7d2650fcaa"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""077405af-5bc5-4472-9ead-c8708a2d8dfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""673835ba-757a-4482-9ec3-92a6662b020c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FrontShoot"",
                    ""type"": ""Button"",
                    ""id"": ""17066dd6-cbb1-4045-a109-4d516cc91e47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SideShoot"",
                    ""type"": ""Button"",
                    ""id"": ""e59ee6e3-8390-4b12-9e9e-623024d674fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftSideShoot"",
                    ""type"": ""Button"",
                    ""id"": ""549fe41b-afee-4d93-ae25-cdc4b9e7be0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSideShoot"",
                    ""type"": ""Button"",
                    ""id"": ""0e712027-dc0f-4a0a-a07e-28f7e0669576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CallMenu"",
                    ""type"": ""Button"",
                    ""id"": ""2dbfa9f8-7398-471e-8264-216e6d2b47dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f19bd95-fcca-4715-8400-8fcaabb4b4e4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0bca796-afc4-4bd7-9de7-51cea59453a4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""18ac2993-5a05-462a-8929-1a12bf9681ce"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""06fc8d67-d93f-461b-830c-3662e28b85eb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""01e14fb8-4751-4350-bf30-ad8c5caabc3b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ac763dbf-f8ff-4444-93f8-4c15b37acf75"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20d58645-c612-4eb5-b698-8978553e646d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""60372722-3a16-4bd2-89f3-641b2e4284e3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1715ec01-5954-4a9a-ae64-7a7787666980"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a6332aa-6148-4242-b731-cfbf1e4c8050"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e075d31e-25cf-4af2-8d9a-9cbc2f56d3f1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd001844-fe5b-42be-9c77-a1527035fb24"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSideShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da2a7ac6-cf89-4ccb-9a7d-915755a6c42b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSideShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65a0b8eb-e337-491e-b7d1-71c690a5d849"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CallMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay_PC
        m_Gameplay_PC = asset.FindActionMap("Gameplay_PC", throwIfNotFound: true);
        m_Gameplay_PC_Move = m_Gameplay_PC.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_PC_Turn = m_Gameplay_PC.FindAction("Turn", throwIfNotFound: true);
        m_Gameplay_PC_FrontShoot = m_Gameplay_PC.FindAction("FrontShoot", throwIfNotFound: true);
        m_Gameplay_PC_SideShoot = m_Gameplay_PC.FindAction("SideShoot", throwIfNotFound: true);
        m_Gameplay_PC_LeftSideShoot = m_Gameplay_PC.FindAction("LeftSideShoot", throwIfNotFound: true);
        m_Gameplay_PC_RightSideShoot = m_Gameplay_PC.FindAction("RightSideShoot", throwIfNotFound: true);
        m_Gameplay_PC_CallMenu = m_Gameplay_PC.FindAction("CallMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay_PC
    private readonly InputActionMap m_Gameplay_PC;
    private IGameplay_PCActions m_Gameplay_PCActionsCallbackInterface;
    private readonly InputAction m_Gameplay_PC_Move;
    private readonly InputAction m_Gameplay_PC_Turn;
    private readonly InputAction m_Gameplay_PC_FrontShoot;
    private readonly InputAction m_Gameplay_PC_SideShoot;
    private readonly InputAction m_Gameplay_PC_LeftSideShoot;
    private readonly InputAction m_Gameplay_PC_RightSideShoot;
    private readonly InputAction m_Gameplay_PC_CallMenu;
    public struct Gameplay_PCActions
    {
        private @Inputs m_Wrapper;
        public Gameplay_PCActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_PC_Move;
        public InputAction @Turn => m_Wrapper.m_Gameplay_PC_Turn;
        public InputAction @FrontShoot => m_Wrapper.m_Gameplay_PC_FrontShoot;
        public InputAction @SideShoot => m_Wrapper.m_Gameplay_PC_SideShoot;
        public InputAction @LeftSideShoot => m_Wrapper.m_Gameplay_PC_LeftSideShoot;
        public InputAction @RightSideShoot => m_Wrapper.m_Gameplay_PC_RightSideShoot;
        public InputAction @CallMenu => m_Wrapper.m_Gameplay_PC_CallMenu;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_PCActions set) { return set.Get(); }
        public void SetCallbacks(IGameplay_PCActions instance)
        {
            if (m_Wrapper.m_Gameplay_PCActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnMove;
                @Turn.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnTurn;
                @FrontShoot.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnFrontShoot;
                @FrontShoot.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnFrontShoot;
                @FrontShoot.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnFrontShoot;
                @SideShoot.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnSideShoot;
                @SideShoot.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnSideShoot;
                @SideShoot.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnSideShoot;
                @LeftSideShoot.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnLeftSideShoot;
                @LeftSideShoot.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnLeftSideShoot;
                @LeftSideShoot.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnLeftSideShoot;
                @RightSideShoot.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnRightSideShoot;
                @RightSideShoot.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnRightSideShoot;
                @RightSideShoot.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnRightSideShoot;
                @CallMenu.started -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnCallMenu;
                @CallMenu.performed -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnCallMenu;
                @CallMenu.canceled -= m_Wrapper.m_Gameplay_PCActionsCallbackInterface.OnCallMenu;
            }
            m_Wrapper.m_Gameplay_PCActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @FrontShoot.started += instance.OnFrontShoot;
                @FrontShoot.performed += instance.OnFrontShoot;
                @FrontShoot.canceled += instance.OnFrontShoot;
                @SideShoot.started += instance.OnSideShoot;
                @SideShoot.performed += instance.OnSideShoot;
                @SideShoot.canceled += instance.OnSideShoot;
                @LeftSideShoot.started += instance.OnLeftSideShoot;
                @LeftSideShoot.performed += instance.OnLeftSideShoot;
                @LeftSideShoot.canceled += instance.OnLeftSideShoot;
                @RightSideShoot.started += instance.OnRightSideShoot;
                @RightSideShoot.performed += instance.OnRightSideShoot;
                @RightSideShoot.canceled += instance.OnRightSideShoot;
                @CallMenu.started += instance.OnCallMenu;
                @CallMenu.performed += instance.OnCallMenu;
                @CallMenu.canceled += instance.OnCallMenu;
            }
        }
    }
    public Gameplay_PCActions @Gameplay_PC => new Gameplay_PCActions(this);
    public interface IGameplay_PCActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnFrontShoot(InputAction.CallbackContext context);
        void OnSideShoot(InputAction.CallbackContext context);
        void OnLeftSideShoot(InputAction.CallbackContext context);
        void OnRightSideShoot(InputAction.CallbackContext context);
        void OnCallMenu(InputAction.CallbackContext context);
    }
}
